{
  "name": "workforce",
  "description": "A cluster manager inspired by Learnboost's cluster.",
  "version": "0.1.4",
  "author": {
    "name": "Garrett Johnson",
    "email": "gjohnson@redventures.com"
  },
  "license": "Apache, Version 2.0",
  "keywords": [
    "cluster",
    "multiserver",
    "server manager"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com:redventures/workforce.git"
  },
  "bugs": {
    "url": "https://github.com/redventures/workforce/issues"
  },
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "configurable": "0.0.1",
    "debug": "0.7.0",
    "ms": "0.1.0"
  },
  "devDependencies": {
    "should": "1.1.0",
    "mocha": "1.3.2",
    "superagent": "0.7.0",
    "express": "3.0.0rc2"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "readme": " [![Build Status](https://secure.travis-ci.org/RedVentures/workforce.png?branch=master)](http://travis-ci.org/RedVentures/workforce)\n\n# workforce\n\nA simple wrapper around native cluster in spirit of the *original cluster*, [LearnBoost/cluster](https://github.com/learnboost/cluster).\n\n## Installation\n\n```shell\n  $ npm install workforce\n```\n\n## Example\n\n```javascript\nvar workforce = require('workforce');\n\nvar manager = workforce('./path/to/server')\n  .set('workers', 4)\n  .set('title', 'awesome app')\n  .set('restart threshold', '10s')\n  .set('exit timeout', '5s');\n\nmanager.configure('development', function(){\n  manager.use(workforce.watch(['./lib']));\n});\n\nmanager.configure('production', function(){\n  manager.set('working directory', '/var/run/awesome-app');\n});\n\nmanager.listen(3000);\n```\n\n## Configuration Options\n\n### workers\nHow many workers to fork. *Defaults to the number of cpus*.\n\n```javascript\nmanager.set('workers', 4);\n```\n  \n### title\nThe title prefix for the process titles. The master process will be appended \"-master\" and the workers will be appended \"-worker\". *Defaults to \"workforce\"*.\n\n```javascript\nmanager.set('title', 'my-app');\n```\n\n### exit timeout\nHow long to wait after a shutdown request has been made until the worker(s) are forcefully killed. You may use \"ms\" style arguments, via: '15s' or just milliseconds as normal. *Defaults to 15000*.\n\n```javascript\nmanager.set('exit timeout', '30s');\n```\n\n### restart threshold\nHow long a worker must be up prior to an exit in order for it to be eligible for a worker replacement.  You may use \"ms\" style arguments here too. *Defaults to 5000*.\n\n```javascript\nmanager.set('restart threshold', '5s');\n```\n\n### working directory\nThe directory to change into prior to spawning the workers. Defaults to the current directory from where the process is started.\n\n```javascript\nmanager.set('working directory', '/home/foo/apps/awesome');\n```\n\n### signals\nThe signals to listen for shutdown, restart and exit. *By default `SIGTERM` will shutdown gracefully, `SIGUSR2` will restart gracefully and `SIGKILL` will exit the workers and process immediately.*\n\n```javascript\nmanager.set('signals', {\n  'shutdown': 'SIGQUIT',\n  'restart': 'SIGHUP',\n  'exit': 'SIGINT'\n});\n```\n\n## Plugins\nThe plugin API is just your typical `.use(fn)` style interface. The bundled plugins are currently:\n\n  - `watch` Watches for file changes to reloads workers.\n  - NEEEED MORE PLUGINS!!!\n\nCustom plugins are easy and are encouraged, if you think it would be handy for everyone, please submit a pull request so we can talk about having it in the core set of plugins. To write a plugin, the plugin should return a function that accepts the workforce instance, which it can use to hook into the \"manager\" process:\n\n*my-plugin.js*\n\n```javascript\nmodule.exports = function(options){\n  options = options || {};\n  return function(manager){\n    // hook into manager process!\n  };\n}\n};\n```\n\n*my-server.js*\n\n```javascript\nvar workforce = require('workforce');\nvar myplugin = require('./my-plugin');\n\nworkforce('./app')\n  .use(myplugin({ foo: 'bar' }))\n  .listen(3000);\n```\n\n## Events\n\n  - `listening` All workers are ready and the application is ready for requests.\n  - `worker` A new worker was spawned.\n  - `worker exit` An existing worker exited.\n  - `shutdown` Master is shutting down.\n  - `restart` Master restarted the workers.\n  - `exit` Master is exiting imediatley along with the workers.\n\n## API\n\n  - workerforce(path)\n  - .use(fn)\n  - .set(key, value)\n  - .configure(env, fn)\n  - .listen(port, fn)\n  - .shutdown(fn)\n  - .restart(fn)\n  - .exit(fn)\n  - .fork(number)\n\n## Attribution\n\n  - [learnboost/cluster](https://github.com/learnboost/cluster) (everything)\n  - [learnboost/up](https://github.com/learnboost/up) (gracefull reloading)\n  - [issacs/cluster-master](https://github.com/isaacs/cluster-master) (worker uptime)\n\n## License\n\nCopyright 2012 Red Ventures\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this work except in compliance with the License.\nYou may obtain a copy of the License in the LICENSE file, or at:\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/redventures/workforce",
  "_id": "workforce@0.1.4",
  "dist": {
    "shasum": "9fda30ea2405ec479d2adeaeb20fc3cfd5906e49"
  },
  "_from": "workforce@*",
  "_resolved": "https://registry.npmjs.org/workforce/-/workforce-0.1.4.tgz"
}
